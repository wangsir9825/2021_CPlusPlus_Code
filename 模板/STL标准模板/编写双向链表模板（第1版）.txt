//编写双向链表模板（第1版）
#if 1
/**************
程序功能：编写双向链表模板（第一版）
时间：2021年7月3日17:51:14
**************/
#include<iostream>
using namespace std;
namespace bit
{
    template<class _Ty>
    class list
    {
    public:
        //类型的萃取
        typedef size_t  size_type;
        typedef _Ty     value_type; //节点内保存的值的类型
        typedef _Ty* pointer_type; // 值的指针
        typedef _Ty& referenct_type; // 值的引用
    public:
        struct _Node; //声明节点
        typedef _Node* _Nodeptr; // 节点指针
        struct _Node // 定义节点结构
        {
            _Nodeptr _Next; // 指向后继节点的指针
            _Nodeptr _Prev; // 指向前驱节点的指针
            value_type _Value; // 节点的值，值的类型为_Ty
        };
        struct _Acc // 工具结构体，可以让我们更方便的寻找指定节点的前驱和后继
        {
            typedef _Nodeptr& _Nodepref; // _Nodepref是节点指针的引用
            typedef _Ty& _Vref; //是节点值的引用
            // 以下成员函数定义为静态，是为了让结构体名可以直接调动成员函数
            static _Nodepref _Next(_Nodeptr _P) 
            {
                return _P->_Next;//返回节点的后继
            }
            static _Nodepref _Prev(_Nodeptr _P)
            {
                return _P->_Prev; //返回节点的前驱
            }
            static _Vref _Value(_Nodeptr _P)
            {
                return _P->_Value; //返回节点的值
            }
        };
    public: // explicit防止隐式转换
        explicit list() :_Head(_Buynode()), _Size(0) // 构造函数
        {}

    public:
        void push_back(const _Ty& x) // 尾插
        {
            _Nodeptr _S = _Buynode(_Head, _Acc::_Prev(_Head));// 购买一个节点
            _Acc::_Value(_S) = x; // 将值保存在新购买的节点
            _Acc::_Next(_Acc::_Prev(_S)) = _S; // _S和前驱节点连接在一起
            _Acc::_Prev(_Head) = _S; // _S和后继节点连接在一起
            _Size++;
        }
        void push_front(const _Ty& x) // 头插
        {
            _Nodeptr _S = _Buynode(_Acc::_Next(_Head), _Head);// 购买一个节点
            _Acc::_Value(_S) = x; // 将值保存在新购买的节点
            _Acc::_Prev(_Acc::_Next(_S)) = _S; // _S和后继节点连接在一起
            _Acc::_Next(_Head) = _S; // _S和前驱节点连接在一起
            _Size++;
        }
        void show()const
        {
            _Nodeptr _P = _Head->_Next;
            while (_P != _Head)
            {
                cout << _P->_Value << "-->";
                _P = _P->_Next;
            }
            cout << _Head->_Next->_Value << endl;
        }
    protected:
        //购买节点函数可以保证创建头节点成功，也可以保证创建一个新节点前后连接成功。
        _Nodeptr _Buynode(_Nodeptr _Narg = 0, _Nodeptr _Parg = 0) // _Narg是后继参数，_Parg是前驱参数
        {
            _Nodeptr _S = (_Nodeptr)malloc(sizeof(_Node)); // 首先申请一个节点
            
            //_S->_Next = _Narg != 0 ? _Narg : _S;
            _Acc::_Next(_S) = _Narg != 0 ? _Narg : _S; //_S的尾连在_Narg上，或者连在自己的头上
            //_S->_Prev = _Parg != 0 ? _Parg : _S;
            _Acc::_Prev(_S) = _Parg != 0 ? _Parg : _S; // _S的头连在_Parg上，或者连在自己的尾上

            return _S;
        }
    private:
        _Nodeptr  _Head; // 指向头节点的指针
        size_type _Size; // 数据节点个数
    };
};
using namespace bit;
int main()
{
    list<int> mylist;
    mylist.push_back(1);
    mylist.push_back(2);
    mylist.push_back(3);
    mylist.push_back(4);
    mylist.push_front(5);
    mylist.show();
    return 0;
}
#endif